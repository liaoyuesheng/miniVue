{"version":3,"file":"vue.iife.js","sources":["../src/core/vdom/vnode.ts","../src/shared/util.ts","../src/core/vdom/patch.ts","../src/core/observer/dep.ts","../src/core/observer/array.ts","../src/core/observer/index.ts","../src/core/observer/watcher.ts","../src/compiler/parser/html-parser.ts","../src/compiler/parser/text-parser.ts","../src/compiler/parser/index.ts","../src/compiler/codegen/index.ts","../src/compiler/index.ts","../src/core/instance/index.ts"],"sourcesContent":["export interface VNodeData {\n  attrs?: { [key: string]: string } // 除class和style以外的attributes\n  staticClass?: string // 静态的class值\n  class?: string | string[] // 动态生成的class值。由v-bind:class=\"...\"生成的值\n  staticStyle?: { [key: string]: string } // 静态的style值\n  style?: { [key: string]: string } // 动态生成的style值。由v-bind:style=\"...\"生成的值\n}\n\n/**\n * 虚拟dom\n * 用来描述真实dom节点的对象（这里用类来实现，可以用普通对象+函数的方法实现）\n */\nexport default class VNode {\n  tag: string // 标签名\n  data: VNodeData // 用来描述DOM节点的attributes，格式和attributes并不相同\n  children: VNode[] // 子节点\n  text: string // 文本节点的textContent\n  elm: HTMLElement | Element | Text  // 所描述的真实DOM节点，可以是元素或文本节点\n  key: string // 唯一的key值\n\n  constructor(\n    tag?: string,\n    data?: VNodeData,\n    children?: VNode[],\n    text?: string,\n    elm?: Element\n  ) {\n    this.tag = tag\n    this.data = data\n    this.children = children\n    this.text = text\n    this.elm = elm\n  }\n}\n\n/**\n * 创建并返回一个元素型VNode实例（虚拟DOM）\n * @param tag 标签名\n * @param data 描述元素的properties的相关数据\n * @param children 子元素集合\n * @private\n */\nexport function createElementVNode(tag: string, data: VNodeData, children: Array<string | VNode>): VNode {\n  if (children) {\n    children = children.map((child) => {\n      if (typeof child === 'string') {\n        return createTextVNode(child)\n      } else {\n        return child\n      }\n    })\n  }\n  return new VNode(tag, data, children as VNode[])\n}\n\n/**\n * 创建并返回一个文本型VNode实例\n * @param text 文本字符串\n * @private\n */\nexport function createTextVNode(text: string): VNode {\n  return new VNode(undefined, undefined, undefined, text)\n}\n","/* eslint-disable @typescript-eslint/no-empty-function */\nexport type AnyFunction = (...args: any[]) => any\n\nexport type AnyObject = {\n  [p: string]: any\n}\n\n/**\n * 是否未定义\n */\nexport function isUndef(v: any): boolean {\n  return v === undefined || v === null\n}\n\n/**\n * 是否已定义\n */\nexport function isDef(v: any): boolean {\n  return v !== undefined && v !== null\n}\n\n/**\n * 是否为对象\n */\nexport function isObject(obj: any): boolean {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * 是否为普通对象\n */\nexport function isPlainObject(obj: any): boolean {\n  return Object.prototype.toString.call(obj) === '[object Object]'\n}\n\n/**\n * 空函数\n */\nexport function noop() {}\n\n/**\n * 为纯函数创建一个具备缓存版本的函数\n */\nexport function cached<T>(fn: (arg: string) => T) : (arg: string)=> T {\n  const cache = Object.create(null)\n  return function cachedFn (str: string) {\n    const hit = cache[str]\n    return hit || (cache[str] = fn(str))\n  }\n}\n\n/**\n * 将分割符连接的字符串转换成驼峰式\n */\nconst camelizeRE = /-(\\w)/g\nexport const camelize = cached((str: string): string => {\n  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : '')\n})\n","import VNode, {VNodeData} from './vnode'\nimport {isDef, isObject, isUndef} from '../../shared/util'\n\n/**\n * 空节点\n */\nexport const emptyNode = new VNode('', {}, [])\n\n/**\n * 对比新老虚拟DOM，找到有差异的节点，更新对应的真实DOM\n * @param oldVnode 老虚拟DOM，值也可以是真实DOM对象\n * @param vnode 新虚拟DOM\n */\nexport default function patch(oldVnode: VNode | Element, vnode: VNode) {\n  // 如果oldVnode是一个真实DOM（比如vue实例初始化的时候）\n  // 则根据vnode创建一颗真实的DOM树，在页面中替换掉原来的DOM\n  if ((oldVnode as Element).nodeType) {\n    const parentElm = (oldVnode as Element).parentNode as Element\n    // 根据vnode创建DOM树，添加为parentElm的子节点\n    createElm(vnode, parentElm, (oldVnode as Element).nextSibling as Element | Text)\n    // 删除原来的真实DOM\n    parentElm.removeChild(oldVnode as Element)\n  } else {\n    // 对比两个虚拟DOM\n    patchVnode(oldVnode as VNode, vnode)\n  }\n}\n\n/**\n * 根据vnode创建一颗真实的DOM树，保存为vnode.elm，并添加为元素parentElm的子节点\n * @param vnode 虚拟DOM\n * @param parentElm 目标父元素\n * @param refElm 基准元素，必须是parentElm的子节点，DOM树会插入到该元素前面的位置。\n *        如果参数缺省，则直接append到parentElm的末尾\n */\nfunction createElm(vnode: VNode, parentElm: Element, refElm?: Element | Text) {\n  // 如果vnode有tag值，说明他描述的是元素，则创建一个DOM元素并更新该元素的attributes\n  if (vnode.tag) {\n    vnode.elm = document.createElement(vnode.tag)\n    updateProps(emptyNode, vnode)\n    // 没有tag值，说明描述的是文本节点\n  } else {\n    // 创建文本节点\n    vnode.elm = document.createTextNode(String(vnode.text))\n  }\n  // 如果有子节点，递归创建子节点对应的真实DOM节点\n  if (vnode.children) {\n    vnode.children.forEach((childVnode) => {\n      createElm(childVnode, vnode.elm as Element)\n    })\n  }\n\n  // 将创建的DOM树插入目标位置\n  insert(parentElm, vnode.elm, refElm)\n}\n\n/**\n * 对比新老虚拟DOM，找到有差异的节点，更新对应的真实DOM\n * 方法默认oldVnode和vnode描述的是同一个真实DOM节点\n * @param oldVnode 老虚拟DOM\n * @param vnode 新虚拟DOM\n */\nfunction patchVnode(oldVnode: VNode, vnode: VNode) {\n  // 由于新vnode刚渲染出来elm属性是没有值的，所以patch时，vnode.elm = oldVnode.elm\n  vnode.elm = oldVnode.elm\n  // 如果vnode是元素节点\n  if (vnode.tag) {\n    // 对比更新对应真实DOM节点的attributes\n    updateProps(oldVnode, vnode)\n\n    // oldVnode的子节点集合\n    const oldChildren = oldVnode.children || []\n    // vnode的子节点集合\n    const newChildren = vnode.children || []\n\n    // 如果新老vnode都有子节点\n    if (oldChildren.length > 0 && newChildren.length > 0) {\n      // 则对比更新所有子节点\n      updateChildren(vnode.elm as Element, oldChildren, newChildren)\n\n      // 如果只有oldVnode有子节点\n    } else if (oldChildren.length > 0 && newChildren.length === 0) {\n      // 则删除老子节点（会删除对应描述的真实DOM节点）\n      removeVnodes(oldChildren)\n\n      // 如果只有vnode有子节点\n    } else if (oldChildren.length === 0 && newChildren.length > 0) {\n      // 则添加新的子节点（会创建对应描述的真实DOM节点）\n      addVnodes(newChildren, vnode.elm as Element)\n    }\n    // 否则是文本节点\n  } else {\n    // 如果文本值不同\n    if (oldVnode.text !== vnode.text) {\n      // 则修改对应真实DOM节点的textContent\n      vnode.elm.textContent = vnode.text\n    }\n  }\n}\n\n/**\n * 对比更新子节点(vnode)\n * @param parentElm 子节点所描述的真实DOM的真实父节点\n * @param oldChildren 老vnode的子节点集合\n * @param newChildren 新vnode的子节点集合\n */\nfunction updateChildren(parentElm: Element, oldChildren: VNode[], newChildren: VNode[]) {\n  let oldStartIndex = 0 // 待对比的老子节点的起点索引值\n  let newStartIndex = 0 // 待对比的新子节点的起点索引值\n  let oldEndIndex = oldChildren.length - 1 // 待对比的老子节点的终点索引值\n  let newEndIndex = newChildren.length - 1 // 待对比的新子节点的终点索引值\n\n  // 当起点索引值小于等于终点索引值时，说明待对比的节点数>0，继续对比\n  while (oldStartIndex <= oldEndIndex && newStartIndex <= newEndIndex) {\n    const oldStartVnode = oldChildren[oldStartIndex] // 待对比的老子节点的起点节点\n    const newStartVnode = newChildren[newStartIndex] // 待对比的新子节点的起点节点\n    const oldEndVnode = oldChildren[oldEndIndex] // 待对比的老子节点的终点节点\n    const newEndVnode = newChildren[newEndIndex] // 待对比的新子节点的终点节点\n\n    // 先比较新老起点节点，如果他们描述的是同一个真实DOM\n    if (sameVnode(oldStartVnode, newStartVnode)) {\n      // 则对比更新这两个节点（vnode）\n      patchVnode(oldStartVnode, newStartVnode)\n      // 新老起始索引都+1\n      oldStartIndex++\n      newStartIndex++\n      continue\n    }\n    // 否则比较新老终点节点，如果他们描述的是同一个真实DOM\n    if (sameVnode(oldEndVnode, newEndVnode)) {\n      // 则对比更新这两个节点（vnode）\n      patchVnode(oldEndVnode, newEndVnode)\n      // 新老索引值都-1\n      oldEndIndex--\n      newEndIndex--\n      continue\n    }\n    // 否则比较老起点节点和新终点节点，如果他们描述的是同一个真实DOM\n    if (sameVnode(oldStartVnode, newEndVnode)) {\n      // 则对比更新这两个节点（vnode）\n      patchVnode(oldStartVnode, newEndVnode)\n      // 把所描述的真实DOM节点挪到新vnode所描述的位置上。\n      // 即老终点节点描述的真实DOM（oldEndVnode.elm）的后面，即oldEndVnode.elm.nextSibling的前面\n      insert(parentElm, oldStartVnode.elm, oldEndVnode.elm.nextSibling as Element)\n      // 老起点索引值+1\n      oldStartIndex++\n      // 新终点索引值-1\n      newEndIndex--\n      continue\n    }\n    // 否则比较老终点节点和新起点节点，如果他们描述的是同一个真实DOM\n    if (sameVnode(oldEndVnode, newStartVnode)) {\n      // 则对比更新这两个节点（vnode）\n      patchVnode(oldEndVnode, newStartVnode)\n      // 把所描述的真实DOM节点挪到新vnode所描述的位置上。即老起点节点描述的真实DOM（oldStartVnode.elm）的前面\n      insert(parentElm, oldEndVnode.elm, oldStartVnode.elm)\n      // 老终点索引值-1\n      oldEndIndex--\n      // 新终点索引值+1\n      newStartIndex++\n      continue\n    }\n\n    // 如果上述4种对比方式都找不到描述相同真实DOM的节点，则遍历待对比新子节点，\n    // 然后拿每一个遍历到的新子节点对比每一个待对比老子节点\n\n    // 在待对比老子节点中，找出和新起点节点描述同一个真实DOM的老子节点的索引值\n    const indexIndOld = findIndexInOld(newStartVnode, oldChildren, oldStartIndex, oldEndIndex + 1)\n    // 如果找到了\n    if (indexIndOld > -1) {\n      // 则对比更新这两个节点（vnode）\n      patchVnode(oldChildren[indexIndOld], newStartVnode)\n      // 把所描述的真实DOM节点挪到新vnode所描述的位置上。即老起点节点描述的真实DOM（oldStartVnode.elm）的前面\n      insert(parentElm, oldEndVnode.elm, oldStartVnode.elm)\n      // 把找到的老子节点从集合中删除\n      oldChildren.splice(indexIndOld, 1)\n      // 老终点索引值-1\n      oldEndIndex--\n      // 否则没找到\n    } else {\n      // 则根据新起点节点创建真实Dom树，添加到老起点节点描述的真实DOM的前面\n      createElm(newStartVnode, parentElm, oldStartVnode.elm)\n    }\n    // 新起点索引值+1\n    newStartIndex++\n  }\n\n  // 所有对比都结束后：\n  // 如果老起点索引值>老终点索引值，说明老子节点全都对比成功（待对比老子节点数量为0）\n  if (oldStartIndex > oldEndIndex) {\n    // 则将剩下待对比的新子节点依次生成对应的真实DOM（如果待对比的新子节点数为0，说明都对比完了，下面的for循环也不会启动），\n    // 生成的DOM插入位置为新终点节点的下一个节点（已对比过，elm属性值已经是一个真实DOM）描述的真实DOM的前面\n    const refElm = newChildren[newEndIndex + 1] && newChildren[newEndIndex + 1].elm\n    for (; newStartIndex <= newEndIndex; newStartIndex++) {\n      createElm(newChildren[newStartIndex], parentElm, refElm)\n    }\n    // 否则如果新起点索引值>新终点索引值，说明新子节点全都对比成功，而老子节点还剩下一些未对比成功\n  } else if (newStartIndex > newEndIndex) {\n    // 则删除这些多余的老子节点描述的真实DOM\n    removeVnodes(oldChildren, oldStartIndex, oldEndIndex + 1)\n  }\n}\n\n/**\n * 在oldChildren中找出和vnode描述的是同一个真实DOM的节点的索引值\n * 找不到的情况下返回-1\n * @param vnode 对比的vnode\n * @param oldChildren 与vnode对比的节点集合\n * @param startIndex 查找的起始索引值（含）\n * @param endIndex 查找的结束索引值（不含）\n */\nfunction findIndexInOld(vnode: VNode, oldChildren: VNode[], startIndex: number, endIndex: number) {\n  if (startIndex >= endIndex) {\n    return -1\n  }\n  // 遍历待查找的老子节点\n  for (let index = startIndex; index < endIndex; index++) {\n    // 如果当前老子节点与vnode描述的是同一个真实DOM， 返回当前索引值\n    if (sameVnode(oldChildren[index], vnode)) {\n      return index\n    }\n  }\n  return -1\n}\n\n/**\n * 判断两个vnode描述的是否为同一个真实DOM\n */\nfunction sameVnode(a: VNode, b: VNode) {\n  return a.key === b.key && a.tag === b.tag\n}\n\n/**\n * 对比新老vnode，更新所描述的真实DOM的属性\n */\nfunction updateProps(oldVnode: VNode, vnode: VNode) {\n  // 更新除style和class以外的attributes\n  updateAttrs(oldVnode, vnode)\n  // 更新内联样式style\n  updateStyle(oldVnode, vnode)\n  // 更新CSS类名class\n  updateClass(oldVnode, vnode)\n}\n\n/**\n * 对比新老vnode，更新所描述的真实DOM除style和class以外的属性\n */\nfunction updateAttrs(oldVnode: VNode, vnode: VNode) {\n  // 老attrs\n  let oldAttrs = oldVnode.data && oldVnode.data.attrs\n  // 新attrs\n  let newAttrs = vnode.data && vnode.data.attrs\n\n  // 如果两个节点都不含attr属性则跳过更新\n  if (!oldAttrs && !newAttrs) {\n    return\n  }\n\n  oldAttrs = oldAttrs || {}\n  newAttrs = newAttrs || {}\n\n  // 真实DOM元素\n  const elm = vnode.elm as Element\n\n  // 遍历老attrs\n  Object.keys(oldAttrs).forEach((key) => {\n    // 如果新attrs中没有这个属性，则删除DOM的这个属性\n    if (isUndef(newAttrs[key])) {\n      elm.removeAttribute(key)\n    }\n  })\n\n  // 遍历新attrs\n  Object.keys(newAttrs).forEach((key) => {\n    // 如果老属性值不等于新属性值，则用新属性值更新DOM\n    if (oldAttrs[key] !== newAttrs[key]) {\n      elm.setAttribute(key, newAttrs[key])\n    }\n  })\n}\n\n/**\n * 对比新老vnode，更新所描述的真实DOM的内联样式style\n */\nfunction updateStyle(oldVnode: VNode, vnode: VNode) {\n  const oldData = oldVnode.data || {} as VNodeData\n  const data = vnode.data || {} as VNodeData\n\n  if (\n    !oldData.staticStyle && !oldData.style &&\n    !data.staticStyle && !data.style\n  ) {\n    return\n  }\n\n  // 老样式=老静态样式与老动态样式合并（动态样式是v-bind:style=\"{}\"这种方式绑定的样式最终计算的结果）\n  const oldStyle = Object.assign({}, oldData.staticStyle || {}, oldData.style || {})\n  // 新样式=新静态样式与新动态样式合并\n  const newStyle = Object.assign({}, data.staticStyle || {}, data.style || {})\n  // 真实DOM\n  const elm = vnode.elm as HTMLElement\n\n  // 遍历老样式\n  Object.keys(oldStyle).forEach((name) => {\n    // 如果新样式中没有这个样式，则删除DOM的这个样式\n    if (!newStyle[name]) {\n      if (isDef(elm.style[name])) {\n        elm.style[name] = ''\n      }\n    }\n  })\n\n  // 遍历新样式\n  Object.keys(newStyle).forEach((name) => {\n    const newStyleVal = newStyle[name]\n    // 如果当前老样式和新样式不同，则用新样式值更新这个DOM\n    if (oldStyle[name] !== newStyleVal) {\n      if (isDef(elm.style[name])) {\n        elm.style[name] = newStyleVal\n      }\n    }\n  })\n}\n\n/**\n * 对比新老vnode，更新所描述的真实DOM的CSS类名class\n * 与updateStyle()方法一个一个修改不同，这里方法的实现是直接将新的class字符串整个赋值给class属性\n */\nfunction updateClass(oldVnode: VNode, vnode: VNode) {\n  const oldData = oldVnode.data || {}\n  const data = vnode.data || {}\n\n  // 如果这连个节点都没有staticClass或class则跳过更新\n  if (\n    !oldData.staticClass && !oldData.class &&\n    !data.staticClass && !data.class\n  ) {\n    return\n  }\n\n  /**\n   * 把class字符串转化为class数组。例如：\"title title-large\" => [\"title\",\"title-large\"]\n   */\n  const classStr2Arr = (string: string) => {\n    return string.trim().split(/\\s+/)\n  }\n  // 新动态class\n  let newClass = data.class\n  // class最终值列表（暂时等于静态class列表，后续会添加新的值进来）\n  const classList = data.staticClass ? (classStr2Arr(data.staticClass)) : []\n\n  // 如果新动态class是字符串，则将它转成数组\n  if (typeof newClass === 'string') {\n    newClass = classStr2Arr(newClass)\n  }\n  // 如果新动态class是数组\n  if (Array.isArray(newClass)) {\n    // 则遍历数组，不重复地将单个class添加进列表\n    newClass.forEach((className) => {\n      if (!classList[className]) {\n        classList.push(className)\n      }\n    })\n    // 否则如果新动态class是对象\n  } else if (isObject(newClass)) {\n    // 则遍历对象，不重复地将单个class添加进列表\n    Object.keys(newClass).forEach((className) => {\n      if (newClass[className] && !classList[className]) {\n        classList.push(className)\n      }\n    })\n  }\n  // class最终值（字符串）\n  const classString = classList.join(' ');\n  // 覆写真实DOM的class属性\n  (vnode.elm as HTMLElement).setAttribute('class', classString)\n}\n\n/**\n * 在基准节点前插入一个节点，如果基准节点不存在，则将要插入的节点添加到父节点内的末尾\n * @param parentElm 父节点\n * @param elm 要插入的节点\n * @param ref 基准节点\n */\nfunction insert(parentElm: Element, elm: Element | Text, ref: Element | Text) {\n  if (ref) {\n    parentElm.insertBefore(elm, ref)\n  } else {\n    parentElm.appendChild(elm)\n  }\n}\n\n/**\n * 根据所给定的起点和终点，依次为节点集合中的每一个节点创建真实DOM\n * @param vnodes 节点集合\n * @param parentElm 父节点\n * @param refElm 基准节点\n * @param start 起点\n * @param end 终点\n */\nfunction addVnodes(vnodes: VNode[], parentElm: Element, refElm?: Element | Text, start = 0, end = vnodes.length) {\n  for (let index = start; index < end; index++) {\n    createElm(vnodes[index], parentElm, refElm)\n  }\n}\n\n/**\n * 根据所给定的起点和终点，依次删除节点集合中的每一个节点所描述的真实DOM\n * @param vnodes\n * @param start\n * @param end\n */\nfunction removeVnodes(vnodes: VNode[], start = 0, end = vnodes.length) {\n  for (let index = start; index < end; index++) {\n    const vnode = vnodes[index]\n    if (!vnode) {\n      continue\n    }\n\n    const elm = vnode.elm\n    if (!elm) {\n      continue\n    }\n\n    const parent = elm.parentNode\n    if (!parent) {\n      continue\n    }\n\n    parent.removeChild(elm)\n  }\n}\n","import Watcher from './watcher'\n\n/**\n * 依赖管理器（采用的设计模式是观察者模式）\n * 用来收集依赖和通知依赖\n * 在本项目，\"依赖\"是Watcher实例\n * 一个响应式属性对应生成一个dep\n */\nexport default class Dep {\n  // 用来临时存放需要被收集的依赖的静态属性\n  static target: Watcher = null\n  // 保存依赖的数组\n  subs: Watcher[] = []\n\n  // 订阅（添加依赖）\n  addSub(sub: Watcher) {\n    this.subs.push(sub)\n  }\n\n  // 删除订阅（删除依赖）\n  removeSub(sub: Watcher) {\n    const index = this.subs.indexOf(sub)\n    if (index > -1) {\n      this.subs.splice(index, 1)\n    }\n  }\n\n  // 收集保存在Dep.target上的依赖\n  depend() {\n    // Dep.target存在，且不再subs中才会被收集，避免重复收集\n    if (Dep.target && !this.subs.includes(Dep.target)) {\n      this.addSub((Dep.target))\n    }\n  }\n\n  // 发布通知\n  notify() {\n    // 调用所有的依赖的update()方法\n    this.subs.forEach((sub) => {\n      sub.update()\n    })\n  }\n}\n","import {def, Observer} from './index'\n\n// 原生数组类的原型\nconst arrayProto = Array.prototype\n// 用来保存数组变异方法集合的对象（变异方法是指下文中的mutator函数，由它代理原始的数组方法，变异方法执行时会通知视图更新）\nexport const arrayMethods = Object.create(arrayProto)\n// 需要变异的数组方法\nexport const methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n\nmethodsToPatch.forEach((method) => {\n  // 以键值对的形式保存变异方法到arrayMethods对象上\n  def(arrayMethods, method, function mutator(...args) {\n    // 调用原始数组方法\n    const result = arrayProto[method].apply(this, args)\n\n    const ob = this.__ob__ as Observer\n    let inserted // 调用方法后新增元素的集合\n    // 当使用push，unshift和splice方法时，数组会新增成员，相应的获取新增成员集合\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n\n    // 如果有新增的成员，将这些成员转成被观察对象\n    if (inserted) {\n      ob.observeArray(inserted)\n    }\n\n    // 通知视图更新\n    ob.dep.notify()\n    return result\n  })\n})\n","import Dep from './dep'\nimport {AnyObject} from '../../shared/util'\nimport {arrayMethods, methodsToPatch} from './array'\n\n/**\n * 将目标对象转化成被观察对象\n * 遍历对象的属性，把每个属性用Object.defineProperty方法转换成getter/setter\n * 通过getter/setter收集依赖和发送通知\n */\nexport class Observer {\n  dep: Dep\n\n  constructor(obj: AnyObject | any[]) {\n    // 通过定义不可遍历的属性'__ob__'， 将实例附加到目标对象上。已附加的对象则表示已经转化过了\n    def(obj, '__ob__', this)\n    this.dep = new Dep()\n\n    // 如果对象是数组\n    if (Array.isArray(obj)) {\n      // 将数组的变更方法转成相应的变异方法\n      augmentArray(obj)\n      // 将数组成员都转成被观察对象\n      this.observeArray(obj)\n    } else {\n      // 将对象所有属性转换成getter/setter\n      this.walk(obj)\n    }\n  }\n\n  /**\n   *  遍历目标对象的所有属性，将属性转换成getter/setter\n   */\n  walk(obj: AnyObject) {\n    const keys = Object.keys(obj)\n    keys.forEach((key) => {\n      defineReactive(obj, key)\n    })\n  }\n\n  /**\n   *  遍历目标数组的成员，将成员转换成被观察对象\n   */\n  observeArray(array: any[]) {\n    array.forEach((item) => {\n      observe(item)\n    })\n  }\n}\n\nconst hasProto = '__proto__' in {}\n\n/**\n * 增强数组，将数组的变更方法转成相应的变异方法，调用变异方法时可以触发更新视图\n */\nfunction augmentArray(arr: any[]) {\n  if (!hasProto) {\n    // 如果可以使用__proto__，则将数组的__proto__指向变异的数组方法对象\n    arr['__proto__'] = arrayMethods\n  } else {\n    // 否则将变异数组方法挨个添加到数组上\n    methodsToPatch.forEach((method) => {\n      def(arr, method, arrayMethods[method])\n    })\n  }\n}\n\n/**\n * 将未转化的对象调用Observer将其转化\n */\nexport function observe(obj: AnyObject): Observer {\n  // 如果不是对象则不处理\n  if (typeof obj !== 'object') {\n    return\n  }\n  // 已转化的，返回对应的Observe实例，未转化的调用Observer将其转化\n  return obj['__ob__'] || new Observer(obj)\n}\n\n/**\n * 转换对象属性为getter/setter\n * 如果对象属性值是对象，则同时转化这个对象为被观察对象\n * （通过这样循环调用，可以递归转化所有后代对象属性为getter/setter）\n * 为这个对象属性创建一个dep(依赖管理器)\n * 当相关依赖（即会读取这个属性值的依赖）触碰这个属性（读取值）时，会触发getter，此时dep收集这个依赖（watcher）\n * 当这个对象属性写值时，会触发setter，此时dep会通知所有收集来的依赖：值变了，你去把对应的视图更新了\n * 因为数组读写值没有对应的getter/setter，所以其响应式能力需要通过变异方法触发和数组关联的observer的dep通知依赖，\n * 所以当getter被触碰时，对应的值是数组，则数组关联的observer的dep也需要收集依赖\n */\n\nexport function defineReactive(obj: AnyObject, key: string) {\n  let val = obj[key]\n  // 方法内部会判断，如果对象属性对应的值是对象，则转化这个对象为被观察对象\n  let childOb = observe(val)\n  // 为这个对象属性创建一个dep(依赖管理器)\n  const dep = new Dep()\n  // 转换对象属性为getter/setter\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get() {\n      // 依赖触碰这个getter前会将依赖放在Dep.target上。所以如果Dep.target存在，则收集这个依赖\n      if (Dep.target) {\n        // 收集依赖\n        dep.depend()\n\n        // 如果子对象存在，且它是数组，则这个子对象对应的observer创建的dep也收集依赖\n        if (childOb && Array.isArray(val)) {\n          childOb.dep.depend()\n          // 如果数组的成员是数组，则也要对应收集依赖\n          dependArray(val)\n        }\n      }\n      return val\n    },\n    set(newVal) {\n      if (newVal === val) {\n        return\n      }\n      val = newVal\n      // 重新写值后，需要重新把后代属性都转成被观察对象\n      childOb = observe(val)\n      // 值发生变化，通知依赖\n      dep.notify()\n    },\n  })\n}\n\n/**\n * 数组的数组成员收集watcher\n */\nfunction dependArray(array: any[]) {\n  array.forEach((item) => {\n    if (Array.isArray(item)) {\n      item['__ob__'] && (item['__ob__'] as Observer).dep.depend()\n      dependArray(item)\n    }\n  })\n}\n\n/**\n * 定义一个属性（主要用来定义一个不可遍历的属性）\n */\nexport function def(obj: AnyObject | any[], key: string, val: any, enumerable?: boolean) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true,\n  })\n}\n","import Dep from './dep'\nimport {noop, AnyFunction} from '../../shared/util'\n\n/**\n * 一个watcher实例对应一个vue组件。\n * 当触碰getter时，watcher会被收集到对应的dep中。\n * 对应的dep是指这个vue组件视图会用到的属性所创建的dep，\n * 比如这个组件会用到:data.title和data.content这两个属性，那么这两个属性创建的dep都会收集这个watcher，\n * 当这两个属性值发生变化时，对应的dep就会通知他的watcher更新视图\n * 关于dep详见\"./dep.ts\"\n */\nexport default class Watcher {\n  // 对应组件更新视图的方法\n  getter: AnyFunction\n\n  constructor(fn = noop) {\n    this.getter = fn\n    this.get()\n  }\n\n  /**\n   * 更新视图\n   */\n  get() {\n    // 将这个watcher保存在Dep.target上，方便对应的dep收集这个watcher\n    Dep.target = this\n    // 更新视图。更新视图的时候会触碰data的getter/setter，使对应的dep收集这个watcher\n    this.getter()\n    Dep.target = null\n  }\n\n  /**\n   * 更新的真正方法\n   * 在queueWatcher()方法中被调用\n   */\n  run() {\n    this.get()\n  }\n\n  /**\n   * 更新\n   * 同一个watcher在一个JS执行队列中多次调用update()，只会在下一个JS执行队列中执行一次run()\n   * 以此实现数据连续多次修改合并到一起更新一次视图\n   */\n  update() {\n    queueWatcher(this)\n  }\n}\n\n// 用来需要在下一个JS队列更新的watcher，同一个watcher只会被push一次\nconst queue = []\n// true表示正在等待下一个JS执行队列\nlet waiting = false\n\n/**\n * 将多个watcher放在下一个JS执行队列一起更新，同一个watcher只会被更新一次\n */\nfunction queueWatcher(watcher) {\n  // 如果没有在等待下一个JS执行队列，则调用nextTick来创建异步执行队列\n  if (!waiting) {\n    waiting = true\n    nextTick().then(() => {\n      // 已进入\"下一个JS执行队列\"，将waiting置为false\n      waiting = false\n      // 执行所有watcher的run()方法\n      queue.forEach((watcher) => {\n        watcher.run()\n      })\n      // 清空watcher队列\n      queue.splice(0, queue.length)\n    })\n  }\n  // 如果队列中没有这个watcher，则推入这个watcher\n  if (!queue.includes(watcher)) {\n    queue.push(watcher)\n  }\n}\n\n\n// 用来保存需要放在下一个JS执行队列执行的函数\nconst callbacks = []\n// true表示用来进入下一个JS执行队列的promise已经创建\nlet pending = false\n\n/**\n * 在下一个JS执行队列中执行函数\n * 当不传callback参数时则返回一个promise\n * @param callback 回调函数\n * @param ctx 回调函数的入参或promise的结果\n */\nfunction nextTick<T>(callback?: () => any, ctx?: T): undefined | Promise<T> {\n  // 用来保存所返回的Promise内部的resolve方法\n  let _resolve\n  // 如果promise未创建则创建一个新的promise，否则跳过\n  if (!pending) {\n    pending = true\n    Promise.resolve().then(() => {\n      // 已进入\"下一个JS执行队列\"，将pending置为false\n      pending = false\n      // 执行所有的回调函数\n      callbacks.forEach((cb) => {\n        cb()\n      })\n      // 清空函数池\n      callbacks.splice(0, queue.length)\n    })\n  }\n  // 添加回调函数（代理函数）。使用代理函数而不是直接添加源函数的原因是：当函数执行时需要将返回的promise的状态置为\"已成功\"\n  callbacks.push(() => {\n    // 执行源函数\n    if (callback) {\n      callback.call(ctx)\n    }\n    // 将返回的promise状态置为\"已成功\"\n    if(_resolve) {\n      _resolve(ctx)\n    }\n  })\n\n  if (!callback) {\n    // 返回一个新的promise，并使_resolve = resolve。这样，当下一个JS执行队列执行的时候，\n    // 这个promise的状态也会变成\"已成功\"\n    return new Promise((resolve) => {\n      _resolve = resolve\n    })\n  }\n}\n\n","import {noop} from '../../shared/util'\n// 匹配标签的attribute，正则分组$1是属性名，$2是\"=\"，$3是属性值\nconst attributeRE = /^\\s*([^\\s\"'<>/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/\n// 匹配有效的标签名\nconst validTagNameRE = /[a-zA-Z_][\\w-]*/\n// 匹配start标签的open部分，例如：<div\nconst startTagOpenRE = new RegExp(`^<(${validTagNameRE.source})`)\n// 匹配start标签的close部分，例如：/> 或者 >。正则分组$1是\"/\"\nconst startTagCloseRE = /^\\s*(\\/)?>/\n// 匹配end标签，例如</div>\nconst endTagRE = new RegExp(`^</(${validTagNameRE.source})[^>]*>`)\n// 匹配注释标签\nconst commentRE = /^<!--/\n// 自闭和标签名集合\nconst unaryTagNames = ['area', 'base', 'br', 'col', 'embed', 'frame', 'hr', 'img', 'input', 'isindex', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr']\n\nexport interface ParseHTMLOptions {\n  /**\n   * 解析到start标签回调函数\n   * @param tagName 标签名\n   * @param attrs attributes对象\n   * @param unary 是否是自闭和标签\n   */\n  start?: (tagName: string, attrs: {[p:string]: string}, unary: boolean) => void\n  /**\n   * 解析到end标签回调函数\n   * @param tagName 标签名\n   */\n  end?: (tagName: string) => void\n  /**\n   * 解析到文本回调函数\n   * @param text 文本内容\n   */\n  chars?: (text: string) => void\n  /**\n   * 解析到注释回调函数\n   * @param text 注释内容\n   */\n  comment?: (text: string) => void\n}\n\n// 默认回调函数都为空函数\nconst defaultOptions: ParseHTMLOptions = {\n  start: noop,\n  end: noop,\n  chars: noop,\n  comment: noop,\n}\n\n/**\n * 该函数不会返回任何值。他仅对输入的html字符串进行解析（或称查找），\n * 分别解析start标签（例如：<div id=\"app\">），end标签（</div>），文本和注释\n * 并在解析到内容时，调用对应回调函数，并将解析到的信息作为参数传递\n * @param html\n * @param options\n */\nexport function parseHTML(html: string, options: ParseHTMLOptions) {\n  // 合并配置项\n  options = Object.assign(defaultOptions, options)\n\n  // 当html字符串不为空时继续解析\n  while (html) {\n    const textEnd = html.indexOf('<')\n\n    // 如果字符\"<\"在开头位置，说明接下来解析的是标签或者注释\n    if (textEnd === 0) {\n      // 对html进行\"注释\"匹配\n      const commentMatch = html.match(commentRE)\n      // 如果匹配到的是注释\n      if (commentMatch) {\n        // 找到注释结尾的索引值\n        const commentEnd = html.indexOf('-->')\n        // 调用解析到注释对应的回调函数，将注释内容作为参数传递\n        options.comment(html.substring(4, commentEnd))\n        // 将html字符串起点挪到\"-->\"末尾位置，例如：\"<!--注释--><div id=\"app\">hi!</div>\" => \"<div id=\"app\">hi!</div>\"\n        advance(commentEnd + 3)\n        continue\n      }\n\n      // 对html进行\"start标签open部分\"匹配\n      const startTagOpenMatch = html.match(startTagOpenRE)\n      // 如果匹配到的是start标签的open部分\n      if (startTagOpenMatch) {\n        // 记下标签名\n        const tagName = startTagOpenMatch[1]\n        // 将html字符起点挪到start标签open部分末尾，例如：\"<div id=\"app\">hi!</div>\" => \" id=\"app\">hi!</div>\"\n        advance(startTagOpenMatch[0].length)\n        // 下面开始解析标签属性\n        // 保存标签属性/值的对象\n        const attrs = {}\n        let attrMatch\n        // 如果匹配到属性\n        while (attrMatch = html.match(attributeRE)) {\n          const matchString = attrMatch[0]\n          // 获取属性名\n          const attrName = attrMatch[1]\n          // 获取属性值\n          const attrVal = attrMatch[3]\n          // 保存到attrs对象上\n          attrs[attrName] = attrVal || ''\n          // 将html字符串起点挪到属性后面，例如：\" id=\"app\">hi!</div>\" => \">hi!</div>\"\n          advance(matchString.length)\n        }\n\n        // 下面解析start标签的end部分\n        const startTagCloseMatch = html.match(startTagCloseRE)\n        // 若匹配到\">\"，\n        if (startTagCloseMatch) {\n          // 将html字符串起点挪到\">\"后面，例如：\">hi!</div>\" => \"hi!</div>\"\n          advance(startTagCloseMatch[0].length)\n          // 若匹配分组匹配符号\"/\"或者标签名在数组unaryTagNames里，则说明该标签是自闭合标签\n          const unary = !!startTagCloseMatch[1] || unaryTagNames.indexOf(tagName) > -1\n          // 调用解析到start标签对应的回调函数\n          options.start(tagName, attrs, unary)\n        } else {\n          // 否则表示start标签未正确关闭（缺少\">\"）Vue会进行一定对容错处理。这里简单起见，直接抛出错误\n          console.error(`[Vue warn]: Error compiling template:\n          start tag <${tagName}> has no closed. Miss close string: \">\"`)\n        }\n        continue\n      }\n\n      // 对html进行\"end标签\"匹配\n      const endTagMatch = html.match(endTagRE)\n      // 如果匹配成功\n      if (endTagMatch) {\n        const matchString = endTagMatch[0]\n        const endTagName = endTagMatch[1]\n        // 将html字符串起点挪到end标签后面，例如\"</div><span>hey!</span>\" => \"<span>hey!</span>\"\n        advance(matchString.length)\n        // 调用解析到end标签对应回调函数\n        options.end(endTagName)\n      }\n      // 否则（字符\"<\"不在开头位置，或者没有找到\"<\"）接下来解析文本\n    } else {\n      // 若果找到了\">\"，就从开头截取到textEnd的位置作为文本内容，否则剩下的整个html都是文本内容\n      const text = textEnd > 0 ? html.substring(0, textEnd) : html\n      // 将html字符串起点挪到文本内容后面，例如：\"hi!</div>\" => \"</div>\"\n      advance(text.length)\n      // 调用解析到文本内容都回调函数\n      options.chars(text)\n    }\n  }\n\n  /**\n   * 将html字符串起点向后挪动n个长度\n   */\n  function advance(n) {\n    html = html.substring(n)\n  }\n}\n","// 匹配双花括号（表达式标签）。正则分组$1为双花括号中的内容\nconst expTagRE = /{{([\\s\\S]+?)}}/g\n\n/**\n * 将文本字符串解析成表达式字符串。例如\"name: {{firstName + lastName}}\" => \"'name: '+_s(name + lastName)\"\n */\nexport function parseText(text): string {\n  // 匹配不到双花括号，说明不含表达式，直接返回undefined\n  if(!expTagRE.test(text)) {\n    return\n  }\n  // 上一个匹配到的字符串终点（不含）索引值\n  let lastEnd = expTagRE.lastIndex = 0\n  // 用来保存每对双花括号内的表达式和相邻双花括号间的字符串，最终输入的表达式字符串 = tokens.join('+')\n  const tokens = []\n  let match\n\n  // 当匹配到双花括号\n  while(match = expTagRE.exec(text)) {\n    const exp = match[1].trim()\n    const index = match.index\n\n    // index>last说明本次匹配到的双花括号和上次匹配到的双花括号之间隔着其他字符串\n    if(index > lastEnd) {\n      // 将隔着的字符串处理后推入tokens中\n      const preString = JSON.stringify(text.substring(lastEnd, index))\n      tokens.push(preString)\n    }\n\n    // 将匹配到的表达式处理后推入tokens中\n    if(exp) {\n      tokens.push(`_s(${exp})`)\n    }\n\n    // 更新lastEnd\n    lastEnd = index + match[0].length\n  }\n\n  // 如果lastEnd < text.length说明匹配结束后还剩一些字符串\n  if(lastEnd < text.length) {\n    // 则将剩余字符串处理后推入tokens中\n    const lastString = JSON.stringify(text.substring(lastEnd))\n    tokens.push(lastString)\n  }\n  // 处理tokens并返回最后结果。处理过程例如：['\"name: \"', '_s(firstName + lastName)'] => '\"name: \" + _s(firstName + lastName)'\n  return tokens.join('+')\n}\n","import {parseHTML} from './html-parser'\nimport {parseText} from './text-parser'\n\nexport interface AST {\n  tag?: string // 标签名\n  attrs?: {[p:string]: string} // 属性对象\n  text?: string // 文本内容\n  expression? :  string\n  unary?: boolean // 是否是自闭合标签\n  children?: AST[] // 子树\n}\n\n/**\n * 将字符串模板解析成AST对象\n */\nexport function parse(template: string): AST {\n  // 保存最后返回的AST根节点对象\n  let astRoot: AST\n  // 栈。存放已解析到的，但还未匹配到其end标签的AST对象（作为后续解析到的AST的父节点）\n  const stack: AST[] = []\n\n  let decoder: Element = null\n  /**\n   * 解码HTML字符串，例如：\"&lt;\" => \"<\"\n   * @param html\n   */\n  function decodeHTML(html: string): string {\n    decoder = decoder || document.createElement('div')\n    decoder.innerHTML = html\n    const text = decoder.textContent\n    decoder.innerHTML = ''\n    return text\n  }\n\n  // 开始解析（查找）模板里的start标签，end标签，文本和注释\n  // 本项目为简单起见，固定不保留注释，故在此不配置comment函数（处理注释的回调函数）\n  parseHTML(template.trim(), {\n    // 解析到start标签\n    start(tag, attrs, unary) {\n      // 根据参数创建一个AST对象\n      const astNode = {\n        tag,\n        attrs,\n        unary,\n      }\n      //取栈中最后一个AST作为父节点\n      const parent = stack[stack.length - 1]\n\n      // 如果这个父节点存在\n      if (parent) {\n        // 将astNode添加到父节点的children中去\n        parent.children = parent.children || []\n        parent.children.push(astNode)\n      } else {\n        // 否则这个节点是根节点，保存到astRoot变量上\n        astRoot = astRoot || astNode\n      }\n\n      // 如果astNode不是自闭合标签，则将它推入栈中，作为后面解析生成的AST的父节点\n      if (!unary) {\n        stack.push(astNode)\n      }\n    },\n    // 解析到end标签\n    end(tag) {\n      // 如果和栈中最后一个AST的标签名不同，说明标签没有正确闭合，那么抛出错误\n      const parentTag = stack[stack.length - 1].tag\n      if (parentTag !== tag) {\n        console.error(`[Vue warn]: Error compiling template:\n        tag <${parentTag}> has no matching end tag.`)\n      }\n      // 如果标签正确闭合了，弹出栈末尾的AST。因为它已经闭合，不会再解析到它的子节点了。\n      stack.pop()\n    },\n    // 解析到文本\n    chars(text) {\n      // 解码，\"&lt;\" => \"<\"\n      text = decodeHTML(text)\n      const parent = stack[stack.length - 1]\n      // 如果栈中没有父节点，说明这段文本在根节点之外，抛弃这段文本\n      if(!parent) {\n        return\n      }\n      parent.children = parent.children || []\n      const lastChild = parent.children[parent.children.length - 1]\n      // 如果父节点的最后一个子节点是文本\n      if (lastChild && !lastChild.tag) {\n        // 则合并这两个文本\n        lastChild.text = lastChild.text + text\n        lastChild.expression = parseText(lastChild.text)\n      } else {\n        // 否则将该文本AST添加到父节点的子节点集合中去\n        parent.children.push({\n          text, // 文本内容\n          expression: parseText(text), // 文本表达式\n        })\n      }\n    },\n  })\n  return astRoot\n}\n","import {camelize} from '../../shared/util'\n\n// 匹配v-bind指令绑定的属性\nconst bindRE = /^(?:v-bind)?:([\\s\\S]+)/\n\n/**\n * 根据AST对象生成渲染函数（渲染生成虚拟DOM）代码字符串\n * 生成的代码字符串类似这样：with(this) {return _c('div', {attrs: {...}, style: {...}}, [_c(...),_c(...)])}\n * \"with(this)\"中的this会指向Vue实例\n */\nexport function generate(ast): string {\n  const code = generateElement(ast)\n  return `with(this) {return ${code}}`\n}\n\n/**\n * 根据AST对象生成渲染函数代码字符串中，\"创建VNode实例\"这部分代码\n * 生成的代码字符串类似这样：_c('div', {attrs: {...}, style: {...}}, [_c(...),_c(...)])\n * 或这样：_v(title + content)\n * 或这样：_v(\"文本内容\")\n * _c()是创建元素型VNode的方法\n * _v()是创建文本型VNode的方法\n */\nfunction generateElement(ast): string {\n  let childrenCode = ''\n\n  // 如果有AST对象，调用generateChildren生成对应代码\n  if (ast.children && ast.children.length > 0) {\n    childrenCode = generateChildren(ast.children)\n  }\n\n  // 如果ast对象当前描述的是元素，则返回\"使用_c()创建元素型VNode\"的代码，否则返回\"使用_v()创建文本型VNode\"的代码\n  return ast.tag ? `_c('${ast.tag}', ${generateData(ast.attrs)}, [${childrenCode}])` : `_v(${ast.expression || JSON.stringify(ast.text)})`\n}\n\n/**\n * 根据AST子对象集合生成渲染函数代码字符串中，\"创建子VNode实例\"这部分代码\n * 生成的代码字符串类似这样：_c(...),_c(...),v(...)\n */\nfunction generateChildren(children): string {\n  return children\n    .map((child) => {\n      return generateElement(child)\n    })\n    .join(',')\n}\n\n/**\n * 根据AST对象attrs属性生成渲染函数代码字符串中，\"入参data\"这部分代码\n * 生成的代码字符串类似这样：{attrs: {id:\"app\"}, style: {color: color}, staticStyle: {overflow: \"hidden\"}, class=\"{hidden: hidden}\", staticClass=\"title title1\"}\n */\nfunction generateData(props): string {\n  if (!props) {\n    return '{}'\n  }\n\n  let data = '{'\n  let attrs = '{'\n  // 遍历AST的attrs\n  Object.keys(props).forEach((prop) => {\n    // ast的attrs.style用来生成staticStyle的代码\n    if (prop === 'style') {\n      let staticStyles = '{'\n      // 用\";\"分割字符串，得到类似这样的数组['color: red', 'font-size': '18px', ...]\n      props[prop].split(';').forEach((styleItem) => {\n        // 继续用\";\"分割字符串，得到CSS样式的属性和值，类似这样：['color', 'red']\n        const propertyVal = styleItem.split(':')\n        // 如果分割成功\n        if (propertyVal.length > 1) {\n          // 增加一组样式，类似这样：fontSize: \"18px\"\n          // 属性名要转成驼峰式命名\n          // 用JSON.stringify()处理字符串可以得到一个被双引号包裹的字符串，且字符串自身的双引号会自动带上转义符。比如 ab\"c\"d => \"ab\\\"c\\\"d\"\n          staticStyles += `${camelize(propertyVal[0].trim())}: ${JSON.stringify(propertyVal[1].trim())},`\n        }\n      })\n\n      // 如果staticStyles长度大于1， 说明staticStyles存在\n      if(staticStyles.length > 1) {\n        // 删除末尾最后一个逗号，补全花括号\n        staticStyles = staticStyles.slice(0, -1) + '}'\n        // 将staticStyle添加进data\n        data += `staticStyle:${JSON.stringify(staticStyles)}},`\n      }\n      return\n    }\n\n    // ast的attrs.class用来生成staticClass的代码\n    if (prop === 'class') {\n      data += `staticClass:${JSON.stringify(props[prop])},`\n      return\n    }\n\n    // 匹配v-bind指令绑定的属性\n    const match = prop.match(bindRE)\n    // 如果匹配到\n    if (match) {\n      // 如果v-bind绑定的是style或class。其值保留原有样子（不用JSON.stringify()转换成被引号包裹的字符串）\n      if (['style', 'class'].indexOf(match[1]) > -1) {\n        // 则添加到data里\n        data += `${match[1]}:${props[prop]},`\n        // 否则添加到attrs里\n      } else {\n        attrs += `${match[1]}:${props[prop]},`\n      }\n      return\n    }\n\n    // 遇到v-cloak指令，删除这个属性\n    if(prop === 'v-cloak') {\n      return\n    }\n\n    // 未匹配到v-bind的属性和值使用JSON.stringify()转换成被引号包裹的字符串\n    attrs += `${JSON.stringify(prop)}:${JSON.stringify(props[prop])},`\n  })\n\n  // 如果attrs字符串长度大于1说明attrs存在\n  if (attrs.length > 1) {\n    // 则删除最后一个逗号，补全花括号\n    attrs = attrs.slice(0, -1) + '}'\n    // 添加到data中去\n    data += `attrs:${attrs},`\n  }\n\n  // 如果data字符串长度大于1说明data存在\n  if (data.length > 1) {\n    // 则删除最后一个逗号，\n    data = data.slice(0, -1)\n  }\n\n  // 补全花括号\n  data += '}'\n  return data\n}\n","import {parse} from './parser'\nimport {generate} from './codegen'\n\nexport function compiler(template: string): string {\n  // 将模板转成AST\n  const ast = parse(template)\n  // 将AST转成渲染函数的函数体字符串\n  return generate(ast)\n}\n","import VNode, {createElementVNode, createTextVNode, VNodeData} from '../vdom/vnode'\nimport patch from '../vdom/patch'\nimport {def, observe} from '../observer'\nimport Watcher from '../observer/watcher'\nimport {compiler} from '../../compiler'\nimport {AnyObject, isPlainObject, isUndef} from '../../shared/util'\n\nexport interface VueOptions {\n  el?: string,\n  data: AnyObject,\n  render? : () => VNode,\n}\n\n/**\n * Vue class\n */\nexport default class Vue {\n  $el: HTMLElement // 对应的真实DOM\n  $options: AnyObject // 配置项\n  $data: AnyObject\n  _renderer: () => VNode\n  _vnode: VNode // 渲染生成的虚拟DOM\n  _data: AnyObject // 数据\n  _watcher: Watcher // 用来通知Vue实例更新视图的Watcher实例\n\n  constructor(options) {\n    this.$options = Object.assign({}, options)\n    this.$el = document.querySelector(this.$options.el)\n    def(this, '$data', options.data)\n    this._data = this.$data\n\n    // 将data的每一个属性都代理到Vue实例上，这样可以直接通过Vue实例修改数据\n    Object.keys(this._data).forEach((key) => {\n      this[key] = this.$data[key]\n      // 通过定义getter/setter，当读写Vue实例的代理属性（与data的直接子属性同名）时，实际读写的是data\n      Object.defineProperty(this, key, {\n        enumerable: true,\n        configurable: true,\n        get() {\n          return this.$data[key]\n        },\n        set(v: any) {\n          this.$data[key] = v\n        },\n      })\n    })\n\n    // 如果没有配置render函数\n    if (!this.$options.render) {\n      // 字符串模板等于配置中的模板，或者真实DOM的outerHTML字符串\n      const template = this.$options.template || this.$el.outerHTML\n      // 编译模板为渲染函数\n      this._renderer = new Function('', compiler(template)) as () => VNode\n    } else {\n      this._renderer = this.$options.render\n    }\n    // 将data对象转换成被观察对象\n    observe(this.$data)\n    // 新建Watcher实例。当相关数据发生变化，该watcher会被通知，从而调用fn更新该Vue实例对应的视图（即$el）\n    this._watcher = new Watcher(() => {\n      // 当watcher被通知，调用_render()生成新的虚拟DOM，再调用_update()更新视图\n      this._update(this._render())\n    })\n  }\n\n  /**\n   * 创建并返回一个元素型VNode实例（虚拟DOM）\n   * @param tag 标签名\n   * @param data 描述元素的properties的相关数据\n   * @param children 子元素集合\n   * @private\n   */\n  $createElement(tag: string, data: VNodeData, children: Array<string | VNode>) {\n    return createElementVNode(tag, data, children)\n  }\n\n  /**\n   * 根据当前数据渲染生成虚拟DOM\n   */\n  _render(): VNode {\n    // 调用渲染函数，同时将渲染函数内部的this指向Vue实例\n    return this._renderer.call(this)\n  }\n\n  /**\n   * 对比新老虚拟DOM，更新视图\n   */\n  _update(vnode: VNode) {\n    // 如果this._vnode没有值，说明需要patch真实DOM和虚拟DOM\n    const oldVnode = this._vnode || this.$el\n    // 保存新虚拟DOM，下次patch它将作为老虚拟DOM\n    this._vnode = vnode\n    // patch老虚拟DOM(或真实虚拟DOM)和新虚拟DOM\n    patch(oldVnode, vnode)\n    // 保存新的真实DOM节点（在初次更新的时候，老$el会被删除）\n    this.$el = vnode.elm as HTMLElement\n  }\n\n  // 下面的方法都是提供给渲染函数使用的\n\n  /**\n   * 创建并返回一个元素型VNode实例（虚拟DOM）\n   * @param tag 标签名\n   * @param data 描述元素的properties的相关数据\n   * @param children 子元素集合\n   * @private\n   */\n  _c(tag: string, data: VNodeData, children: Array<string | VNode>) {\n    return createElementVNode(tag, data, children)\n  }\n\n  /**\n   * 创建并返回一个文本型VNode实例\n   * @param text 文本字符串\n   * @private\n   */\n  _v(text: string) {\n    return createTextVNode(text)\n  }\n\n  /**\n   * 将值转成字符串。其中对象或数组将转成JSON字符串\n   * @param text\n   * @private\n   */\n  _s(text: any) {\n    if(isUndef(text)) {\n      return ''\n    }\n\n    if(Array.isArray(text) || isPlainObject(text)) {\n      return JSON.stringify(text, null, 2)\n    }\n\n    return String(text)\n  }\n}\n"],"names":[],"mappings":"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"}